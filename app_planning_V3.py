# -*- coding: utf-8 -*-
"""
Created on Tue Jun 24 14:48:50 2025

@author: felima
"""

import streamlit as st
import pandas as pd
from fpdf import FPDF
import tempfile
import os
from typing import Dict, List
from collections import defaultdict
import traceback
import itertools

st.set_page_config(page_title="Planning Juges by Crossfit Amiens ü¶Ñ Copyright ¬© 2025 Felix Marcellin", layout="wide")
st.title("Planning Juges by Crossfit Amiens ü¶Ñ Copyright ¬© 2025 Felix Marcellin")

# ============================================================
# PDF G√©n√©ration
# ============================================================
def generate_pdf_tableau(planning: Dict[str, List[Dict[str, any]]]) -> FPDF:
    pdf = FPDF(orientation='P')
    pdf.set_auto_page_break(auto=True, margin=15)

    for juge, creneaux in planning.items():
        if not creneaux:
            continue

        pdf.add_page()
        pdf.set_font("Arial", 'B', 16)
        pdf.cell(0, 10, "Nom de la comp√©tition", 0, 1, 'C')
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, f"Planning: {juge}", 0, 1, 'C')
        pdf.ln(10)

        col_widths = [30, 10, 15, 50, 25, 40]
        headers = ["Heure", "Lane", "WOD", "Athlete", "Division", "Emplacement"]

        pdf.set_fill_color(211, 211, 211)
        pdf.set_font("Arial", 'B', 10)
        for header, width in zip(headers, col_widths):
            pdf.cell(width, 10, header, border=1, align='C', fill=True)
        pdf.ln()

        pdf.set_font("Arial", '', 9)
        row_colors = [(255, 255, 255), (240, 240, 240)]

        for i, c in enumerate(creneaux):
            pdf.set_fill_color(*row_colors[i % 2])
            start_time = c['start'].strftime('%H:%M') if hasattr(c['start'], 'strftime') else c['start']
            end_time = c['end'].strftime('%H:%M') if hasattr(c['end'], 'strftime') else c['end']

            data = [
                f"{start_time} - {end_time}",
                str(c['lane']),
                c['wod'],
                c['athlete'],
                c['division'],
                c['location']
            ]

            for val, width in zip(data, col_widths):
                pdf.cell(width, 10, str(val), border=1, align='C', fill=True)
            pdf.ln()

        pdf.ln(10)
        pdf.set_font("Arial", 'I', 10)
        total_wods = len({c['wod'] for c in creneaux})
        pdf.cell(0, 8, f"Total: {len(creneaux)} cr√©neaux sur {total_wods} WODs", 0, 1)

    return pdf


# ============================================================
# PDF Heat Map
# ============================================================
def generate_heat_pdf(planning: Dict[str, List[Dict[str, any]]]) -> FPDF:
    heat_map = defaultdict(lambda: defaultdict(str))

    for juge, creneaux in planning.items():
        for c in creneaux:
            start = c['start'].strftime('%H:%M') if hasattr(c['start'], 'strftime') else c['start']
            end = c['end'].strftime('%H:%M') if hasattr(c['end'], 'strftime') else c['end']
            key = (c['wod'], c.get('heat', ''), start, end, c['location'])
            heat_map[key][int(c['lane'])] = juge

    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", '', 10)

    heats = sorted(heat_map.items(), key=lambda x: (x[0][0], x[0][1]))

    for i in range(0, len(heats), 2):
        pdf.add_page()
        col_width = 90
        row_height = 8
        spacing = 15

        for j in range(2):
            if i + j >= len(heats):
                break

            (wod, heat, start, end, location), lanes = heats[i + j]
            x_position = 10 + j * (col_width + spacing)

            pdf.set_font("Arial", 'B', 10)
            pdf.set_xy(x_position, 15)
            pdf.cell(col_width, row_height, f"{wod} - Heat {heat}", border=1, align='C', fill=True)
            pdf.set_font("Arial", '', 9)
            pdf.set_xy(x_position, 15 + row_height)
            pdf.cell(col_width, row_height, f"{start} - {end} @ {location}", border=1, align='C')

            pdf.set_xy(x_position, 15 + 2*row_height)
            pdf.set_font("Arial", 'B', 9)
            pdf.cell(col_width/2, row_height, "Lane", border=1, align='C', fill=True)
            pdf.cell(col_width/2, row_height, "Juge", border=1, align='C', fill=True)

            pdf.set_font("Arial", '', 9)
            for k, lane in enumerate(sorted(lanes)):
                y_position = 15 + (3 + k) * row_height
                pdf.set_xy(x_position, y_position)
                pdf.cell(col_width/2, row_height, str(lane), border=1, align='C')
                pdf.cell(col_width/2, row_height, lanes[lane], border=1, align='C')

    return pdf


# ============================================================
# LOGIQUE PRINCIPALE STREAMLIT
# ============================================================
def main():
    with st.sidebar:
        st.header("Import des fichiers")
        schedule_file = st.file_uploader("Planning (Excel)", type=["xlsx"])

        st.header("Saisie des juges")
        input_method = st.radio("M√©thode de saisie des juges", ["Fichier CSV", "Saisie manuelle"], index=0)

        judges = []
        if input_method == "Fichier CSV":
            judges_file = st.file_uploader("Liste des juges (CSV)", type=["csv"])
            if judges_file:
                judges = pd.read_csv(judges_file, header=None, encoding='latin1')[0].dropna().tolist()
        else:
            judges_text = st.text_area("Saisir les noms des juges (un par ligne)", value="Juge 1\nJuge 2\nJuge 3", height=150)
            judges = [j.strip() for j in judges_text.split('\n') if j.strip()]
            if judges:
                st.write("Juges saisis:")
                st.write(judges)

        # Nouveau param√®tre : nombre de heats cons√©cutifs actifs
        rotation = st.radio("Nombre de heats cons√©cutifs par juge avant repos", options=[1, 2], index=1)

    if schedule_file and judges:
        try:
            schedule = pd.read_excel(schedule_file, engine='openpyxl')

            st.subheader("Aper√ßu du planning import√©")
            st.dataframe(schedule.head())

            required_columns = ['Workout', 'Lane', 'Competitor', 'Division', 'Workout Location',
                                'Heat Start Time', 'Heat End Time', 'Heat #']
            if not all(col in schedule.columns for col in required_columns):
                st.error("Erreur: Colonnes manquantes.")
                st.write("Colonnes requises:", required_columns)
                st.write("Colonnes trouv√©es:", list(schedule.columns))
                return

            schedule = schedule[~schedule['Competitor'].str.contains('EMPTY LANE', na=False)]
            schedule['Workout'] = schedule['Workout'].fillna("WOD Inconnu")
            wods = sorted(schedule['Workout'].unique())

            st.header("Disponibilit√© des Juges par WOD")
            disponibilites = {wod: set() for wod in wods}
            cols = st.columns(3)
            for i, wod in enumerate(wods):
                with cols[i % 3]:
                    with st.expander(f"WOD: {wod}"):
                        select_all = st.checkbox(f"Tout s√©lectionner pour {wod}", key=f"select_all_{wod}")
                        if select_all:
                            selected_judges = judges
                        else:
                            selected_judges = st.multiselect(f"S√©lection des juges pour {wod}", judges, key=f"dispo_{wod}")
                        disponibilites[wod] = set(selected_judges)

            if st.button("G√©n√©rer les plannings"):
                planning = {j: [] for j in judges}

                for wod, group in schedule.groupby('Workout'):
                    juges_dispo = list(disponibilites[wod])
                    if not juges_dispo:
                        st.error(f"Aucun juge disponible pour {wod}!")
                        continue

                    group = group.sort_values(['Heat #', 'Lane'])
                    heats = sorted(group['Heat #'].unique())

                    nb_juges = len(juges_dispo)
                    nb_lanes = group['Lane'].nunique()
                    active_juges = nb_lanes
                    repos_juges = nb_juges - active_juges

                    juge_cycle = itertools.cycle(juges_dispo)
                    rotation_cycle = []

                    # Cr√©er une rotation √©quilibr√©e
                    for i in range(0, nb_juges, active_juges):
                        rotation_cycle.append(juges_dispo[i:i+active_juges])

                    juge_index = 0
                    for heat_idx, heat in enumerate(heats):
                        lines = group[group['Heat #'] == heat].sort_values('Lane').reset_index(drop=True)

                        # Calcul du groupe de juges actifs
                        bloc = (heat_idx // rotation) % (len(juges_dispo) // active_juges)
                        juges_actifs = rotation_cycle[bloc]

                        # Affectation des lanes aux juges actifs
                        for lane_idx, (_, row) in enumerate(lines.iterrows()):
                            juge = juges_actifs[lane_idx % len(juges_actifs)]
                            planning[juge].append({
                                'wod': wod,
                                'lane': row['Lane'],
                                'athlete': row['Competitor'],
                                'division': row['Division'],
                                'location': row['Workout Location'],
                                'start': row['Heat Start Time'],
                                'end': row['Heat End Time'],
                                'heat': row['Heat #']
                            })

                pdf_juges = generate_pdf_tableau({k: v for k, v in planning.items() if v})
                pdf_heats = generate_heat_pdf({k: v for k, v in planning.items() if v})

                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_juges:
                    pdf_juges.output(tmp_juges.name)
                    with open(tmp_juges.name, "rb") as f:
                        st.download_button("T√©l√©charger planning par juge", data=f, file_name="planning_juges.pdf", mime="application/pdf")
                    os.unlink(tmp_juges.name)

                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_heats:
                    pdf_heats.output(tmp_heats.name)
                    with open(tmp_heats.name, "rb") as f:
                        st.download_button("T√©l√©charger planning par heat", data=f, file_name="planning_heats.pdf", mime="application/pdf")
                    os.unlink(tmp_heats.name)

                st.success("‚úÖ PDF g√©n√©r√©s avec succ√®s!")
                st.header("R√©capitulatif des affectations")
                for juge, creneaux in planning.items():
                    if creneaux:
                        with st.expander(f"Juge: {juge} ({len(creneaux)} cr√©neaux)"):
                            st.table(pd.DataFrame(creneaux))

        except Exception as e:
            st.error("Erreur lors du traitement:")
            st.code(traceback.format_exc())
    else:
        st.info("Veuillez uploader le fichier de planning et saisir les juges pour commencer")


if __name__ == "__main__":
    main()
